# Write a program that prompts for a file name, then opens that file and reads through the file, and print the contents of the file in upper case. 
#You can download the sample data at http://www.py4e.com/code3/words.txt

fname = input("Enter file name: ")
fh = open(fname)
for line in fh.readlines():
    print(line.upper().strip())

# Write a program that prompts for a file name, then opens that file and reads through the file, looking for lines of the form:
# X-DSPAM-Confidence:    0.8475
# Count these lines and extract the floating point values from each of the lines and compute the average of those values and produce an output as shown below. 
#Do not use the sum() function or a variable named sum in your solution.
# You can download the sample data at http://www.py4e.com/code3/mbox-short.txt

count = 0
total = 0
fname = input("Enter file name: ")
fh = open(fname)
for line in fh:
    if line.startswith("X-DSPAM-Confidence:"):
        L = line.find(":")
        M = float(line[L+2:])
        count = count+1
        total = float(total + M)
print("Average spam confidence:",total/count)

# Open the file romeo.txt and read it line by line. For each line, split the line into a list of words using the split() method. 
# The program should build a list of words. For each word on each line check to see if the word is already in the list and if not append it to the list. 
# When the program completes, sort and print the resulting words in alphabetical order.
#You can download the sample data at http://www.py4e.com/code3/romeo.txt

fname = input("Enter file name: ")
fh = open(fname)
lst = list()
for line in fh:
    line = line.split()
    for word in line:
        if not word in lst:
            lst.append(word)
lst.sort()
print(lst)

# Open the file mbox-short.txt and read it line by line. When you find a line that starts with 'From ' like the following line:
#From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
#You will parse the From line using split() and print out the second word in the line (i.e. the entire address of the person who sent the message). 
#Then print out a count at the end.
#Hint: make sure not to include the lines that start with 'From:'. Also look at the last line of the sample output to see how to print the count.
#You can download the sample data at http://www.py4e.com/code3/mbox-short.txt

fname = input("Enter file name: ")
fh = open(fname)
count = 0
for line in fh:
    line = line.rstrip()
    if line.startswith("From "):
        word = line.split()
        print(word[1])
        count = count + 1
print("There were", count, "lines in the file with From as the first word")

#Write a program to read through the mbox-short.txt and figure out who has sent the greatest number of mail messages. 
#The program looks for 'From ' lines and takes the second word of those lines as the person who sent the mail. 
#The program creates a Python dictionary that maps the sender's mail address to a count of the number of times they appear in the file. 
#After the dictionary is produced, the program reads through the dictionary using a maximum loop to find the most prolific committer.

name = input("Enter file name: ")
handle = open(name)
counts = dict()
list1 = list()
for lines in handle:
    if lines.startswith("From "):
        words = lines.split()
        list1.append(words[1])
for el in list1:
    counts[el] = counts.get(el,0)+1
bigvalue = None
bigkey = None
for key,value in counts.items():
    if bigvalue is None or value > bigvalue:
        bigvalue = value
        bigkey = key
print(bigkey,bigvalue)

# Write a program to read through the mbox-short.txt and figure out the distribution by hour of the day for each of the messages. 
#You can pull the hour out from the 'From ' line by finding the time and then splitting the string a second time using a colon.
#From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
#Once you have accumulated the counts for each hour, print out the counts, sorted by hour as shown below.

name = input("Enter file:")
handle = open(name)
dic = dict()
lst = list()
for lines in handle:
    if lines.startswith("From "):
        words = lines.split()
        str1 = ''.join(words[5])
        lst.append(str1[0:2])
for t in lst:
    dic[t] = dic.get(t,0)+1
for i,e in sorted(dic.items()):
    print(i,e)

